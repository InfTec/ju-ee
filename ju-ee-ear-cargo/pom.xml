<?xml version="1.0" encoding="UTF-8"?>
<!--
    JBoss, Home of Professional Open Source
    Copyright 2013, Red Hat, Inc. and/or its affiliates, and individual
    contributors by the @authors tag. See the copyright.txt in the
    distribution for a full listing of individual contributors.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
--><project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
    	<groupId>ch.inftec.ju</groupId>
        <artifactId>ju-ee-parent</artifactId>
        <version>6.1</version>
    </parent>

    <artifactId>ju-ee-ear-cargo</artifactId>
	<description>We put the Cargo tests in a separate module as the failsafe plugin had problems verifying test results when we put the tests in the EAR module directly (as EARs don't have test classes usually).</description>
	
    <dependencies>
    	<!-- Client libraries - need to be added explicitly as we use scope provided to not mess up with the JBoss libraries... -->
    	<dependency>
			<groupId>org.wildfly</groupId>
			<artifactId>wildfly-ejb-client-bom</artifactId>
			<type>pom</type>
			<!-- Needed in ServiceLocatorBuilder to avoid use of properties file - verify that this works like this... -->
			<scope>provided</scope>
			<!-- TODO Provided scope or optional? -->
		</dependency>
		
    	<!-- EAR to deploy -->
		<dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>ju-ee-ear</artifactId>
            <type>ear</type>
        </dependency>
		
<!--         Depend on the ejb module and war so that we can package them -->
<!--         <dependency> -->
<!--             <groupId>ch.inftec.webapp</groupId> -->
<!--             <artifactId>ju-ee-ear-web</artifactId> -->
<!--             <type>war</type> -->
<!--         </dependency> -->
<!--         <dependency> -->
<!--             <groupId>ch.inftec.webapp</groupId> -->
<!--             <artifactId>ju-ee-ear-ejb</artifactId> -->
<!--             <type>ejb</type> -->
<!--         </dependency> -->
        
        <!-- Integration tests -->
        <!-- Arquillian dependencies. TODO: Maybe move to ee-ear-ejb-test as transitive dependencies -->
<!--         <dependency> -->
<!--             <groupId>org.jboss.as</groupId> -->
<!--             <artifactId>jboss-as-arquillian-container-remote</artifactId> -->
<!--             <scope>test</scope> -->
<!--         </dependency> -->
		<dependency>
			<groupId>org.jboss.arquillian.junit</groupId>
			<artifactId>arquillian-junit-container</artifactId>
			<scope>test</scope>
		</dependency>
        
         <dependency>
            <groupId>org.jboss.arquillian.protocol</groupId>
            <artifactId>arquillian-protocol-servlet</artifactId>
            <scope>test</scope>               
        </dependency>
        
        <!-- Test classes for container tests -->
        <dependency>
        	<groupId>${project.groupId}</groupId>
        	<artifactId>ju-ee-ear-ejb-test</artifactId>
        	<version>${project.version}</version>
        </dependency>
        <dependency>
        	<groupId>${project.groupId}</groupId>
        	<artifactId>ju-ee-ear-web-test</artifactId>
        	<version>${project.version}</version>
        </dependency>

		<!-- Required as we reference it in test classes -->
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>ju-ee-ear-ejb</artifactId>
			<type>ejb</type>
			<version>${project.version}</version>
			<scope>provided</scope>
		</dependency>
        
        <dependency>
        	<groupId>${project.groupId}</groupId>
        	<artifactId>ju-ee-ear-jar</artifactId>
        	<version>${project.version}</version>
        	<type>test-jar</type>
        	<scope>test</scope>
        </dependency>
        <dependency>
        	<groupId>${project.groupId}</groupId>
        	<artifactId>ju-ee-ear-ejb-test</artifactId>
        	<version>${project.version}</version>
        	<type>test-jar</type>
        	<scope>test</scope>
        </dependency>
        <dependency>
        	<groupId>${project.groupId}</groupId>
        	<artifactId>ju-ee-ear-web-test</artifactId>
        	<version>${project.version}</version>
        	<type>test-jar</type>
        	<scope>test</scope>
        </dependency>
        
        <dependency>
			<groupId>ch.inftec.ju</groupId>
			<artifactId>ju-ee-testing-web</artifactId>
			<scope>test</scope>
		</dependency>
    </dependencies>

    <build>
    	<plugins>
			<plugin>
				<groupId>ch.inftec.ju</groupId>
				<artifactId>ju-maven-plugin</artifactId>
				
				<configuration>
					<chain>
						<resourceFolders>
							<resourceFolder>src/main/resources</resourceFolder>
						</resourceFolders>
						<properties>
							<property>
								<key>groups</key>
								<value>$${ju-ee.junit.groups}</value>
							</property>
						</properties>
						
<!-- 						<exportToSystemProperty> -->
<!-- 							<includes> -->
<!-- 								<include>.*SysYes</include> -->
<!-- 							</includes> -->
<!-- 						</exportToSystemProperty> -->
						<filter>
							<includes>
								<include>ju.*</include>
								<include>cargo.*</include>
								<include>groups</include>
							</includes>
						</filter>
						<logAddedKeys>true</logAddedKeys>
						<chainElements>
							<chainElement>
								<lookupConfigFile>
									<fileName>mvn-ee.files</fileName>
								</lookupConfigFile>
							</chainElement>
						</chainElements>
					</chain>
				</configuration>
				
				<executions>
					<execution>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>properties</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
    	
            <plugin>
            	<groupId>org.apache.maven.plugins</groupId>
            	<artifactId>maven-failsafe-plugin</artifactId>
            	<executions>
		        	<execution>
		            	<goals>
		              		<goal>integration-test</goal>
		              		<goal>verify</goal>
		            	</goals>
		            	<configuration>
		            		<dependenciesToScan>
		            			<dependencyToScan>ch.inftec.ju:ju-ee-ear-jar</dependencyToScan>
		            			<dependencyToScan>ch.inftec.ju:ju-ee-ear-ejb-test</dependencyToScan>
		            			<dependencyToScan>ch.inftec.ju:ju-ee-ear-web-test</dependencyToScan>
		            		</dependenciesToScan>
		            	</configuration>
		          	</execution>
		    	</executions>
            </plugin>

			<plugin>
				<groupId>org.codehaus.cargo</groupId>
				<artifactId>cargo-maven2-plugin</artifactId>
		
				<executions>
					<execution>
						<id>start-container</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>start</goal>
<!-- 							<goal>deploy</goal> Cargo will automatically deploy when starting the server-->
						</goals>
					</execution>
					<execution>
						<id>stop-container</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>stop</goal>
						</goals>
						<!--
							JBoss shutdown has problems. Might be related to https://issues.jboss.org/browse/JBEAP-3002 
							Tried to decrease the timeout, but it would only seem to have an evect on starting, not stoping...		
						-->
						<configuration>
							<container>
								<timeout>1</timeout>
							</container>
						</configuration>
					</execution>
				</executions>
			</plugin>
        </plugins>
    </build>
   
    <profiles>
        <profile>
        	<id>cargo-standalone</id>
        	<activation>
        		<activeByDefault>true</activeByDefault>
        	</activation>
        	<build>
        		<plugins>
        			<plugin>
	        			<groupId>org.codehaus.cargo</groupId>
						<artifactId>cargo-maven2-plugin</artifactId>
		        		<configuration>
		        			<!-- For details, see http://cargo.codehaus.org/Maven2+Plugin+Reference+Guide -->
							<container>
								<containerId>wildfly10x</containerId>
								<home>${cargo.jboss.home}</home>
								<systemProperties>
									<ju-util-ee.portOffset>${ju-util-ee.portOffset}</ju-util-ee.portOffset>
								</systemProperties>
							</container>
							
							<configuration>
								<type>standalone</type>
								<!-- <home>${project.build.directory}/cargo/configurations/jboss71x</home>  --><!-- See https://svn.java.net/svn/mojarra~svn/trunk/test/pom.xml for explicit values examples-->
								<properties>
									<cargo.port.offset>${ju-util-ee.portOffset}</cargo.port.offset> <!-- Offset port as the default settings cause problems on Jenkins CI environment -->
<!-- 									<cargo.hornetq.dirPrefix>${ju.ee.jboss.hornetqDirPrefix}</cargo.hornetq.dirPrefix> -->
<!-- 									<cargo.logging>high</cargo.logging> -->
									<cargo.jboss.configuration>standalone-full</cargo.jboss.configuration>
								</properties>
																
<!-- 								<configfiles> -->
									<!-- Note: When overwriting the standalone.xml file, cargo properties are not applied automatically. We must use the token
									           explicitly in the standalone.xml template, e.g. @cargo.port.offset@
									-->
<!-- 									<configfile> -->
<!-- 										<file>${project.basedir}/src/test/resources/jbossConfigFiles/standalone_ju-ee-ear.xml</file> -->
<!-- 										<todir>configuration</todir> -->
<!-- 										<tofile>standalone.xml</tofile> We need to overwrite the standalone.xml file as Cardo seems to check for an existing configuration before it copies configuration files...  -->
<!-- 									</configfile> -->
<!-- 								</configfiles> -->
							</configuration>
							
							<deployables>
								<deployable>
									<groupId>${project.groupId}</groupId>
									<artifactId>ju-ee-ear</artifactId>
									<type>ear</type>
									<!-- Don't forget to change the following to your apps URL -->
									<pingURL>http://localhost:${cargo.jboss.httpPort}/ju-ee-ear-web/up.jsf</pingURL>
									<!-- This is the default; make larger if required -->
									<pingTimeout>120000</pingTimeout>
									<properties>
										<name>ju-ee-ear</name> <!-- Otherwise, the version ID will be included in the name when calling maven on the Cargo project directly -->
									</properties>
									
								</deployable>
							</deployables>
						</configuration>
					</plugin>
				</plugins>
			</build>
        </profile>
        
        <profile>
        	<id>cargo-existing</id>
        	<build>
        		<plugins>
        			<plugin>
	        			<groupId>org.codehaus.cargo</groupId>
						<artifactId>cargo-maven2-plugin</artifactId>
		        		<configuration>
							<container>
								<containerId>jboss71x</containerId>
								<home>C:/esw/server/jboss-eap-6.0.1</home>
		<!-- 						<zipUrlInstaller> -->
		<!-- 							<url>http://download.jboss.org/jbossas/7.0/jboss-as-7.0.0.Final/jboss-as-7.0.0.Final.zip</url> -->
		<!-- 						</zipUrlInstaller> -->
							</container>
							<configuration>
								<home>C:/esw/server/jboss-eap-6.0.1/standalone</home>
								<type>existing</type>
								<properties>
									<cargo.jboss.configuration>standalone_cargo</cargo.jboss.configuration>
									<cargo.jboss.deployment.dir>deployments_cargo</cargo.jboss.deployment.dir>
								</properties>
							</configuration>
							<deployables>
								<deployable>
									<!-- Artifact to deploy; change to your artifact -->
									<groupId>ch.inftec.ju</groupId>
									<artifactId>ju-ee-ear</artifactId>
									<type>ear</type>
									<!-- Don't forget to change the following to your apps URL -->
									<pingURL>http://localhost:18080/ju-ee-ear-web</pingURL>
									<!-- This is the default; make larger if required -->
									<pingTimeout>20000</pingTimeout>
								</deployable>
							</deployables>
						</configuration>
					</plugin>
        		</plugins>
        	</build>
        </profile>
    </profiles>
</project>
